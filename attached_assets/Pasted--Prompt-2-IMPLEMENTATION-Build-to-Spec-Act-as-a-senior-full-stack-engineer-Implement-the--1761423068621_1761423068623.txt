# Prompt 2 — IMPLEMENTATION (Build to Spec)

Act as a senior full‑stack engineer. Implement the **Satsangee District Map** exactly as specified below. Use **FastAPI (Python)** on Replit for backend + templates, **Leaflet** for map UI, and a lightweight **admin UI** for data entry + bulk CSV import. Keep the code clean, documented, and production‑ish. When done, the app must run in Replit with one click.

---

## Non‑Negotiables

* District: **Bhadrak, Odisha** only.
* Start on a **world/India view**, let user **zoom or search**, then **fly to Bhadrak** and show village markers.
* **Villages** come from provided **2011 census GeoJSON** (we will upload it). Convert polygons → **centroid + bbox** for pins.
* **Volunteers/professionals** show as list in each village popup (tap‑to‑call phone). Icons on markers are fine, but **no doctor pins on the map**.
* **Doctors** are a **separate list page** (city + specialty filters), curated (verified=true only).
* **Admin UI** to add/edit/verify entries and **bulk CSV import** for villages & members. Simple login via env vars.
* Keep it fast and small. Prefer server‑rendered Jinja templates + a little JS; no SPA required.

---

## Tech Stack & Project Shape

* **Backend:** FastAPI, SQLModel/SQLAlchemy, SQLite for MVP (switchable to Postgres via `DATABASE_URL`).
* **Templates:** Jinja2 + Tailwind CDN (or minimal CSS).
* **Map:** Leaflet + MarkerCluster; OSM tiles.
* **Auth:** Session cookie; single admin user (env: `ADMIN_EMAIL`, `ADMIN_PASSWORD`, `SESSION_SECRET`).
* **Storage:** Tables: `villages`, `members`, `doctors`, `admins` (optional), `audit` (simple), `reports` (for “Report profile”).
* **Scripts:** `scripts/geo_to_centroids.py` converts uploaded Bhadrak GeoJSON → CSV with centroid + bbox.
* **Deployment:** Uvicorn in Replit. A single `run` command launches the server.

**Repo layout (create exactly):**

```
/ (root)
  main.py
  db.py
  models.py
  auth.py
  requirements.txt
  /templates
    index.html      # Map page (search + map + clusters)
    doctors.html    # Doctors list (filters)
    login.html
    admin.html      # dashboard + bulk import forms
    members.html    # manage members (table + add form + verify action)
    doctors_admin.html # manage doctors
  /static
    /css (optional) /img (optional)
  /scripts
    geo_to_centroids.py
  README.md
```

---

## Data Model (implement with SQLModel)

**villages**: id, name, block, district="Bhadrak", state="Odisha", lat, lng, south, west, north, east, code_2011

**members**: id, full_name, role (Volunteer/Electrician/Plumber/Technician/Lawyer/Engineer), phone, languages (comma string), verified (bool), notes, village_id (FK), created_at, updated_at

**doctors**: id, full_name, specialty, city, hospital, phone, languages (comma), referral_reason, referred_by, rank (int), verified (bool), created_at, updated_at

**audit**: id, table_name, row_id, action, changed_by, changed_at, diff (json text)

**reports**: id, table_name, row_id, reason, created_at, created_by_ip

---

## Routes & Behavior (must implement)

### Public pages

* `GET /` → **Map page**. Top bar: search input + "Bhadrak" button + link to **/doctors**. Map starts over India; on pressing Bhadrak button or searching a Bhadrak village, **flyTo** Bhadrak/bounds.
* `GET /doctors` → doctors list; filters by `?city=&specialty=`; only verified.

### Public APIs

* `GET /api/villages` → list of all villages with `{id,name,block,lat,lng,bbox}`.
* `GET /api/members?village_id=&role=&verified=&q=` → members (default `verified=true`).
* `GET /api/village/{id}/volunteers` → verified members in village.
* `POST /report` → record a report (rate‑limit per IP, simple).

### Admin

* `GET /admin/login` (form), `POST /admin/login` (env creds), `GET /admin/logout`.
* `GET /admin` → dashboard counts; bulk upload forms (villages CSV, members CSV).
* `GET /admin/members` → table with search; verify action.
* `POST /admin/members/new` → add member.
* `POST /admin/members/{id}/verify` → set verified=true.
* `GET /admin/doctors` → manage doctors table.
* `POST /admin/doctors/new` → add doctor.
* `POST /admin/bulk/villages` (CSV) → upsert villages.
* `POST /admin/bulk/members` (CSV) → insert members (option: verify on import).

**CSV formats (show on /admin):**

* Villages: `name,block,lat,lng,south,west,north,east,code_2011`
* Members: `full_name,role,phone,languages,village` (village matches by name; reject if not found)

---

## Map UX (Leaflet)

* Tiles: OSM. World/India start: setView([20.5,78.9],4). Button **Bhadrak** → `flyTo([20.8333,86.9333],9)`.
* Load villages from `/api/villages`, push markers into **MarkerCluster**.
* **Marker popup** content loads via `/api/village/{id}/volunteers` and renders list of verified members with role chips + phone links.
* Search box: on Enter, match a village by name; if found → `flyToBounds(bbox, {maxZoom:13})`. If query looks like specialty (e.g., "cardio", "doctor"), redirect to `/doctors?specialty=...`.
* Phone numbers are masked until click is fine for v2; MVP can show tel: links directly.

---

## Doctors Page UX

* Show chips for available cities and specialties from the current result set.
* Sort by city → specialty → rank.
* Card shows: name, specialty, hospital, city, referral_reason, phone link, languages.

---

## Admin UX

* Minimal, fast: tables + forms.
* Bulk CSV upload with server‑side validation; returns JSON with `inserted` count + any `errors`.
* "Verify" button per member.
* Optional: write an audit row on create/verify.

---

## Geo Script (must generate centroids from uploaded 2011 GeoJSON)

* Path: `scripts/geo_to_centroids.py`
* Input: `bhadrak_2011.geojson` (we will upload).
* Output: `villages.csv` with the exact column order required.
* Use Shapely, simplify polygons (`tolerance=0.001`), compute centroid + bounds.

---

## Environment & Run

* `requirements.txt` includes: `fastapi`, `uvicorn[standard]`, `jinja2`, `sqlmodel`, `sqlalchemy`, `aiosqlite`, `python-multipart`, `shapely`, `geojson`.
* Add Replit Secrets: `ADMIN_EMAIL`, `ADMIN_PASSWORD`, `SESSION_SECRET`. Optional: `DATABASE_URL` (Postgres) to override SQLite.
* **Run command:** `uvicorn main:app --host 0.0.0.0 --port 8000`.

---

## Acceptance Tests (do not mark complete until all pass)

1. **Map loads** in Replit webview; clusters render; clicking a village shows volunteers (or "No verified volunteers yet").
2. **Search** for a real village name (from CSV) flies to its bounds at maxZoom ≤ 13.
3. **Bhadrak button** recenters/zooms appropriately.
4. **Doctors page** lists only verified doctors; filters by query params.
5. **Admin login** works with env creds; bulk import villages CSV inserts rows; members CSV with `verify=true` imports and marks verified.
6. **Adding a member** via form immediately shows up in `/api/members` and in the village popup after refresh.
7. **Report** endpoint accepts a reason and stores it with IP.
8. **DB swap**: setting `DATABASE_URL` to a Postgres URL causes app to boot with tables auto‑created (no code changes).

---

## Performance & Polish (MVP level)

* Cache‑friendly responses; avoid N+1 in popups.
* Keep initial payloads small; don’t ship polygon GeoJSON to the client—only centroids.
* Basic responsive styles; mobile tap targets ≥44px.

---

## Deliverables

* All files created per tree above.
* Seed data: include a tiny `sample_villages.csv` (3 rows) and `sample_members.csv` (3 rows) in the repo for instant demo.
* README with setup steps (upload GeoJSON → run script → import CSVs → admin creds → go live).

---

## After You Implement

* Print the URL paths to test in the console at startup.
* If any library on Replit conflicts, choose the closest alternative without changing the user‑facing behavior.
* Proceed now to write all code and templates. Keep comments brief and useful.
